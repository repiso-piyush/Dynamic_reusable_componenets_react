import React, { useState } from "react";
import CustomButton from "@/components/customButton";
import useCustomButton from "@/components/customButton/useCustomButton";
import { Input } from "@/components/ui/input";
import { PlayCircle } from "lucide-react";
import { useMutation } from "@tanstack/react-query";
import { APiServices } from "@/services/commonServices";
import { useDispatch } from "react-redux";
import { showToast } from "@/store/slices/toastSlice";
import JsonViewer from "@/components/JsonViewer";

const RunPlayGround = ({ formData, effectiveChain, toolsData, llmsData }) => {
  const dispatch = useDispatch();  
  const { customButtonVariants } = useCustomButton();
  const { callPostApi } = APiServices();
  const [inputValues, setInputValues] = useState({});
  const [errors, setErrors] = useState({});

  const runPlaygroundMutation = useMutation({
    mutationKey: ["runPlaygroundMutation"],
    mutationFn: async (data) =>
      await callPostApi("integration/api/agents/playground", data),
    onSuccess: (response) => {
      dispatch(
        showToast({
          title: "",
          message: "Playground ran successfully",
          variant: "success",
          open: true,
        })
      );
      return response;
    },
    onError: (error) => {
      console.log(error);
      dispatch(
        showToast({
          title: "Error",
          message: "Failed to run playground",
          variant: "error",
          open: true,
        })
      );
      return error;
    },
  });

  const validateInputs = () => {
    const newErrors = {};
    formData.parameter.forEach((param) => {
      if (param.required) {
        const value = inputValues[param.name];
        if (!value) {
          newErrors[param.name] = "This field is required";
        } else {
          switch (param.type) {
            case "int":
              if (!Number.isInteger(Number(value))) {
                newErrors[param.name] = "Must be an integer";
              }
              break;
            case "float":
              if (isNaN(parseFloat(value))) {
                newErrors[param.name] = "Must be a number";
              }
              break;
            case "list":
              const regex = /^(\s*\w+\s*,)*\s*\w+\s*$/;
              if (!regex.test(value)) {
                newErrors[param.name] =
                  "Must be comma-separated values (e.g., 1,2,3)";
              }
              break;
          }
        }
      }
    });
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleInputChange = (name, value) => {
    setInputValues((prev) => ({ ...prev, [name]: value }));
  };

  const onSubmit = () => {
    if (validateInputs()) {
      const cleanEffectiveChain = effectiveChain.map((item) => {
        const { id, ...cleanItem } = item;
        return cleanItem;
      });
      const payload = { ...inputValues };
      if (formData.parameter.some((param) => param.type === "list")) {
        Object.keys(payload).forEach((key) => {
          const param = formData.parameter.find((p) => p.name === key);
          if (param && param.type === "list") {
            payload[key] = payload[key].split(",").map((item) => item.trim());
          }
        });
      }
      const finalChain = cleanEffectiveChain.map((item) =>
        "tool" in item
          ? { tool: toolsData.find((tool) => tool._id === item.tool._id) }
          : "llm" in item
          ? { llm: llmsData.find((llm) => llm._id === item.llm._id) }
          : item
      );
      runPlaygroundMutation.mutate({
        agent: { ...formData, chain: finalChain },
        payload,
      });
    }
  };

  const renderApiResponse = (data) => {
    if (data === null || data === undefined) return null;

    return (
      <div className="bg-white w-full p-6 rounded-lg shadow-md border border-gray-200 overflow-x-auto">
        <h3 className="text-2xl font-bold mb-6 text-gray-800 pb-2 border-b-2 border-gray-300">
          Playground Response
        </h3>
        <div className="bg-gray-100 p-4 rounded-md">
          <JsonViewer data={data} initialExpanded={true} />
        </div>
      </div>
    );
  };

  return (
    <div className="space-y-4 mt-4 w-full max-h-[50vh] overflow-y-auto">
      {runPlaygroundMutation.isSuccess ? (
        renderApiResponse(runPlaygroundMutation.data.data)
      ) : (
        <>
          {formData.parameter.map((param, index) => (
            <React.Fragment key={index}>
              {param.required && (
                <div className="grid grid-cols-1 md:grid-cols-5 gap-4 items-center">
                  <label
                    htmlFor={param.name}
                    className="md:col-span-2 justify-self-start font-semibold text-ellipsis overflow-hidden whitespace-nowrap"
                  >
                    {param.name}
                  </label>
                  <div className="md:col-span-3">
                    <Input
                      id={param.name}
                      type={
                        param.type === "int" || param.type === "float"
                          ? "number"
                          : "text"
                      }
                      value={inputValues[param.name] || ""}
                      onChange={(e) =>
                        handleInputChange(param.name, e.target.value)
                      }
                      className={errors[param.name] ? "border-red-500" : ""}
                      placeholder={
                        param.type === "list"
                          ? "Enter comma-separated values"
                          : ""
                      }
                    />
                    {errors[param.name] && (
                      <p className="text-red-500 text-sm mt-1">
                        {errors[param.name]}
                      </p>
                    )}
                  </div>
                </div>
              )}
            </React.Fragment>
          ))}

          <CustomButton
            onClick={onSubmit}
            variant={customButtonVariants.PRIMARY}
            className="w-full"
            disabled={runPlaygroundMutation.isPending}
          >
            <span className="flex items-center justify-center">
              <PlayCircle className="h-5 w-5 mr-2" />
              {runPlaygroundMutation.isPending
                ? "Running..."
                : "Run Playground"}
            </span>
          </CustomButton>
        </>
      )}
    </div>
  );
};

export default RunPlayGround;
